diff --git a/src/bin/broadcast.rs b/src/bin/broadcast.rs
index ff90591..df56971 100644
--- a/src/bin/broadcast.rs
+++ b/src/bin/broadcast.rs
@@ -59,7 +59,7 @@ impl Node<(), Payload, InjectedPayload> for BroadcastNode
             loop
             {
                 thread::sleep(Duration::from_millis(250));
-                if let Err(_) = tx.send(Event::Injected(InjectedPayload::Gossip))
+                if tx.send(Event::Injected(InjectedPayload::Gossip)).is_err()
                 {
                     break;
                 }
diff --git a/src/bin/echo.rs b/src/bin/echo.rs
index eb1069f..861da6d 100644
--- a/src/bin/echo.rs
+++ b/src/bin/echo.rs
@@ -34,8 +34,10 @@ impl Node<(), Payload> for EchoNode
 
     fn step(&mut self, input: Event<Payload>, output: &mut StdoutLock) -> Result<()>
     {
-        let Event::Message(input) = input else {
-            panic!("got unexpected injected event: {:#?}", input);
+        let Event::Message(input) = input
+        else
+        {
+            panic!("got unexpected injected event: {input:#?}");
         };
 
         let mut reply = input.into_reply(Some(&mut self.id));
diff --git a/src/bin/unique-ids.rs b/src/bin/unique-ids.rs
index e45cb48..8e408b3 100644
--- a/src/bin/unique-ids.rs
+++ b/src/bin/unique-ids.rs
@@ -36,8 +36,10 @@ impl Node<(), Payload> for UniqueNode
 
     fn step(&mut self, input: Event<Payload>, output: &mut StdoutLock) -> Result<()>
     {
-        let Event::Message(input) = input else {
-            panic!("got unexpected injected event: {:#?}", input);
+        let Event::Message(input) = input
+        else
+        {
+            panic!("got unexpected injected event: {input:#?}");
         };
 
         let mut reply = input.into_reply(Some(&mut self.id));
diff --git a/src/lib.rs b/src/lib.rs
index 7d28cc4..04bbf8a 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -105,7 +105,9 @@ where
             .context("EOF before init message-2")?,
     )
     .context("Error deserializing init message")?;
-    let InitPayload::Init(init) = init_msg.body.payload else {
+    let InitPayload::Init(init) = init_msg.body.payload
+    else
+    {
         panic!("Expected init message first");
     };
     let mut node: N =
@@ -131,7 +133,7 @@ where
             let line = line.context("Maelstrom input from STDIN could not be read")?;
             let input: Message<P> = serde_json::from_str(&line)
                 .context("Maelstrom input from STDIN could not be deserialized")?;
-            if let Err(_) = tx.send(Event::Message(input))
+            if tx.send(Event::Message(input)).is_err()
             {
                 return Ok::<_, anyhow::Error>(());
             }
